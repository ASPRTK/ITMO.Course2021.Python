# Практическое занятие 4. Применение операторов ветвления и циклов

# Использование циклов
# Добавьте в разработанную программу возможность бросать кубик игрокам
# несколько раз и по итогам этих бросков определять победителя (например, по
# количеству побед в сеансах или по общей сумме очков).


from random import randint
import time

# Ввод имен играющих
igrok1 = input('Введите имя 1-го играющего: ')
igrok2 = input('Введите имя 2-го играющего: ')

countPlaer01 = 0
countPlaer02 = 0

# ЗАДАЧА 01: Добавьте в программу цикл for, реализующий 5 партий (бросков):
for i in range(5):
    # Моделирование бросания кубика первым играющим
    print('Кубик бросает', igrok1)
    time.sleep(2)
    n1 = randint(1, 6)
    print('Выпало:', n1)
    # Моделирование бросания кубика вторым играющим
    print('Кубик бросает', igrok2)
    time.sleep(2)
    n2 = randint(1, 6)
    print('Выпало:', n2)
    # Определение результата (3 возможных варианта)
    if n1 > n2:
        print('\tВыиграл', igrok1)
        countPlaer01 += 1
    elif n1 < n2:
        print('\tВыиграл', igrok2)
        countPlaer02 += 1
    else:
        print('\tНичья')

# ЗАДАЧА 02:  Добавьте реализацию определения победителя. Например, с помощью
# подсчета количества побед каждым игроком, или суммированием очков.
# ЗАДАЧА 03:  После цикла добавьте оператор ветвления для определения итогового
# победителя.

print('Итог счета: (', igrok1, '/', igrok2, ') - ', countPlaer01, ':', countPlaer02, sep='')
if countPlaer01 > countPlaer02:
    print('По итогу сражения одержал победу: ', igrok1)
elif countPlaer01 < countPlaer02:
    print('По итогу сражения одержал победу: ', igrok2)
else:
    print('Ничья')
